/**
 * Copyright 2015 Marclass
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package bruteForcer;

import java.util.ArrayList;
import java.util.ListIterator;

public class BruteForceThreadManager{
	
	private ArrayList<Thread> threads;
	private ArrayList<BruteForceThread> bruteForceThreads;
	private ArrayList<String> bruteAddrs;
	private ArrayList<String> foundAddrs;
	private int maxThreads;
	private Thread infoThread;
	
	
	public BruteForceThreadManager(int maxThreads){
		this.maxThreads = maxThreads;
		this.bruteForceThreads = new ArrayList<BruteForceThread>();
		this.bruteAddrs = new ArrayList<String>();
		this.foundAddrs = new ArrayList<String>();
		this.threads = new ArrayList<Thread>();
		
		infoThread = new Thread(new InfoThread(foundAddrs, bruteForceThreads));
	}
	public BruteForceThreadManager(int maxThreads, String bruteAddr){
		this.maxThreads = maxThreads;
		this.bruteForceThreads = new ArrayList<BruteForceThread>();
		this.bruteAddrs = new ArrayList<String>();
		bruteAddrs.add(bruteAddr);
		this.foundAddrs = new ArrayList<String>();
		this.threads = new ArrayList<Thread>();
		
		infoThread = new Thread(new InfoThread(foundAddrs, bruteForceThreads));
		
	}
	public BruteForceThreadManager(int maxThreads, ArrayList<String> bruteAddrs){
		this.maxThreads = maxThreads;
		this.bruteForceThreads = new ArrayList<BruteForceThread>();
		this.bruteAddrs = bruteAddrs;
		this.foundAddrs = new ArrayList<String>();
		this.threads = new ArrayList<Thread>();
		
		infoThread = new Thread(new InfoThread(foundAddrs, bruteForceThreads));
	}
	
	public void begin(int startIndex, int stopIndex){
		if(maxThreads<=0){
			maxThreads=Runtime.getRuntime().availableProcessors();
		}
		ListIterator<String> itter = bruteAddrs.listIterator();
		for (int i=0;i<maxThreads;i++){
			
			if(!itter.hasNext()){
				//circular loop through given addrs
				itter=bruteAddrs.listIterator();
			}
				bruteForceThreads.add(new BruteForceThread(itter.next(), startIndex, stopIndex));
				threads.add(new Thread(this.bruteForceThreads.get(this.bruteForceThreads.size()-1)));
			
		}
		System.out.println("maxThreads = "+maxThreads+" numThreads = "+bruteForceThreads.size());
		for(int i=0;i<threads.size();i++){
			//bruteForceThreads.get(i).run();
			this.threads.get(i).start();
		}
		this.infoThread.start();
		
		long last = System.currentTimeMillis();
		long start = last;
		
		while(true){
			//search forever
			for(int i=0;i<bruteForceThreads.size();i++){
				if(bruteForceThreads.get(i).isDone()){
					if(! itter.hasNext()){
						
						itter=bruteAddrs.listIterator();
					}
					
					foundAddrs.add(bruteForceThreads.get(i).getFoundAddr());
					System.out.println("Found Addr = "+bruteForceThreads.get(i).getFoundAddr());
					bruteForceThreads.set(i, new BruteForceThread(itter.next(), startIndex, stopIndex));
					threads.set(i, new Thread(this.bruteForceThreads.get(i)));
					threads.get(i).start();
				}
			}
			try {
				Thread.sleep(1000); //sleepy manager is 1.25x better manager
				//constantly checking if a thread is done or not is a lot of extra overhead we don't need to do so often
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		
		}
		
	}
	
	
	public void addBruteAddr(String bruteAddr){
		this.bruteAddrs.add(bruteAddr);
	}
	
	public ArrayList<String> getFoundAddrs(){
		return this.foundAddrs;
	}
	
	
	
}