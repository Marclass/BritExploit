/**
 * Copyright 2015 Marclass
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package bruteForcer;

import java.security.NoSuchAlgorithmException;
import java.util.Random;

import bruteForcer.Base58;
import bruteForcer.Utils;


public class BruteForce{
	
	private Random random;
	private String targetAddr;
	private byte[] mutableAddr;
	private long count=0;
	private final byte[] alphabet={'1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
	private Base58 base58; 
	
	public BruteForce(String targetAddr){
		this.targetAddr=targetAddr;
		this.mutableAddr = this.targetAddr.getBytes();
		this.random = new Random();
		this.count=0;
		
		try {
			this.base58 = new Base58();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public long getCount(){
		return this.count;
	}
	
	public String begin(int startIndex, int stopIndex, boolean threadded) throws InterruptedException{
		long start = System.currentTimeMillis();
		//long count = 0;
		System.out.println("beginning brute force");
		
		Thread.sleep(1);
		
		while(true){
			count++;
			//randomly scramble given range of the address then check if it's a valid address. 
			for(int i=startIndex; i<stopIndex;i++){
				mutableAddr[i]=alphabet[random.nextInt(alphabet.length)];
			}
			
			
			try {
				if(base58.decodeChecked2(mutableAddr)!=null){
					System.out.println("Found address = "+new String(mutableAddr));
					break;
				}
			} catch (AddressFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(count%1000000==0){
				
				if(threadded){
					Thread.sleep(1);
				}else{
					long delta = System.currentTimeMillis()-start;
					//System.out.println(mutableAddr.length+" "+targetAddr.length()+" "+new String((targetAddr.getBytes())));
					System.out.println("count= "+count+"\ndelta = "+(((long)delta)/1000/60.0)+" min\ncurrent addr = "+new String((mutableAddr))+"\n");
				}
				
			}
		}
		long delta=System.currentTimeMillis()-start;
		
		String result="\ninput= "+this.targetAddr+"\n";
		result+="output= "+new String((mutableAddr))+"\n";
		result+="count = "+count+"\n";
		result+="time elapsed= "+(delta/1000/60)+" min = "+(delta/1000/60/60)+" hrs";
		System.out.println(result);
		
		
		//result+=;
		return new String(mutableAddr);
	}
	
	
	
	
}