/**
 * Copyright 2015 Marclass
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package bruteForcer;

import java.util.ArrayList;

public class InfoThread implements Runnable {


	private long start=0;
	private ArrayList<BruteForceThread> bruteForceThreads;
	private ArrayList<String> foundAddrs;

	public InfoThread(ArrayList<String> foundAddrs, ArrayList<BruteForceThread> bruteForceThreads){
		
		this.start= System.currentTimeMillis();

		this.bruteForceThreads = bruteForceThreads;
		this.foundAddrs = foundAddrs;
	}


	@Override
	public void run() {
		// TODO Auto-generated method stub

		//if((System.currentTimeMillis() - last)/1000 >=30){

		//long totalCount = 0;
		double expected = Math.pow(2, 31);
		try {
			while(true){
				long last = System.currentTimeMillis();
				double min =  ((last-start)/1000/60.0);
				System.out.println(min+" minutes elapsed");

				double count=0;
				for(int i=0;i<bruteForceThreads.size();i++){
					count+=bruteForceThreads.get(i).getCount();
				}
				System.out.println("count = "+count);
				System.out.println("num threads = "+this.bruteForceThreads.size());
				double countPerMin = (count/Math.max(min,1));//wrong when running for <1 min, but don't really care
				System.out.println("expected  = "+expected+"\ncountPerMin = "+countPerMin);
				System.out.println("expected time to finish = "+ expected/countPerMin);
				System.out.println("expected time left = "+ (expected/Math.max(countPerMin,1) - min));
				System.out.println("Found Addresses so far:");
				for(int i=0;i<foundAddrs.size();i++){
					System.out.println(foundAddrs.get(i));
				}
				System.out.println("");
				Thread.sleep(30*1000);
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//}
	}

}
